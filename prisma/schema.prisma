generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://admin:&Q$YFoS*qf$L9$Gu%23x@hackathon-db.cy3vf5fdxo5f.us-east-1.rds.amazonaws.com:3306/hackaton-db"
}

model accounts {
  id                               Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  balance                          Float?     @db.Float
  user_id                          Int
  name                             String?    @db.VarChar(255)
  users                            users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "uac")
  expenses                         expenses[]
  users_accountsTousers_account_id users[]    @relation("accountsTousers_account_id")

  @@index([user_id], map: "uac_idx")
}

model category {
  category String     @id @unique(map: "category_UNIQUE") @db.VarChar(255)
  expenses expenses[]
}

model expense_item {
  id         Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  title      String?  @db.VarChar(510)
  amount     Float?   @db.Float
  price      Float?   @db.Float
  expense_id Int
  expenses   expenses @relation(fields: [expense_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eei")

  @@index([expense_id], map: "eei_idx")
}

model expenses {
  id                          Int            @id @unique(map: "id_UNIQUE") @default(autoincrement())
  merchant                    String?        @db.VarChar(255)
  date                        DateTime?      @db.DateTime(0)
  user_id                     Int
  created_at                  DateTime?      @default(now()) @db.DateTime(0)
  account_id                  Int
  category                    String?        @db.VarChar(255)
  isShoppingList              Int            @default(0) @db.TinyInt
  accounts                    accounts       @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accid")
  category_categoryToexpenses category?      @relation(fields: [category], references: [category], onDelete: NoAction, onUpdate: NoAction, map: "catid")
  expense_item                expense_item[]

  @@index([category], map: "catid_idx")
  @@index([account_id], map: "expenseaccount_idx")
  @@index([user_id], map: "user_expense_idx")
}

model users {
  id                                  Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  username                            String?    @unique(map: "username_UNIQUE") @db.VarChar(255)
  email                               String?    @unique(map: "email_UNIQUE") @db.VarChar(255)
  password                            String?    @db.VarChar(255)
  account_state                       Float?     @db.Float
  cognito_id                          String     @unique(map: "cognito_id_UNIQUE") @db.VarChar(255)
  account_id                          Int?
  accounts_accountsTousers_account_id accounts?  @relation("accountsTousers_account_id", fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_accounts")
  accounts                            accounts[]

  @@index([account_id], map: "users_accounts_idx")
}
